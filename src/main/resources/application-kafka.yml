spring:
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
#      bootstrap-servers: 127.0.0.1:9092 # 会覆盖 spring.kafka.bootstrap-servers 配置
      key-serializer: org.apache.kafka.common.serialization.StringSerializer # 序列化key的类
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 反序列化value的类
      client-id: PRODUCER-CLIENT-ID
      retries: 0 # When greater than zero, enables retrying of failed sends.
      buffer-memory: 2MB # Total memory size the producer can use to buffer records waiting to be sent to the server.
      batch-size: 16KB # Default batch size. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
#      bootstrap-servers: 127.0.0.1:9092 # 会覆盖 spring.kafka.bootstrap-servers 配置
      group-id: kafka-test # 消费者所属消息组
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 反序列化key的类
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 反序列化value的类
      client-id: CONSUMER-CLIENT-ID
      enable-auto-commit: true # 是否开启周期性提交
#      enable-auto-commit: false # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
#      auto-commit-interval: 1S # 自动提交的时间间隔
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
#      auto-offset-reset: earliest
    admin:
      client-id: ADMIN-CLIENT-ID
      fail-fast: true # broker不能使用的时候，启动失败，默认false
    listener:
      concurrency: 5 # 在侦听器容器中运行的线程数。
      missing-topics-fatal: false # 该设置项结合Broker设置项allow.auto.create.topics=true，如果为false，则会自动创建不存在的topic
#      ack-mode: manual_immediate #  每调用一次，就立即commit, enable-auto-commit开启后，手动提交不可用
      client-id: LISTENER-CLIENT-ID